# Package tools API
*Generated by ApiWriter v1.0*
*Package documentation for tools package*

## Core Classes

<class ApiWriter>
*ApiWriter - Generates .api documentation files from Java source code. Extracts class signatures, method definitions, and documentation for AI consumption. @author HelloWorld Project @version 1.0*
public class ApiWriter

#Methods
** Main entry point for API generation.** @param args Command line arguments: [input_path] [output_path]*
public static void main(String[] args)

** Generates API documentation for an entire package directory.** @param packageDir Directory containing Java source files* @param outputPath Output file path (optional)* @throws IOException if file operations fail*
private static void generatePackageApi(Path packageDir, String outputPath) throws IOException

** Generates API documentation for a single Java class file.** @param javaFile Path to Java source file* @param outputPath Output file path (optional)* @throws IOException if file operations fail*
private static void generateClassApi(Path javaFile, String outputPath) throws IOException

** Generates API content for a single Java class.** @param javaFile Path to Java source file* @return API content string* @throws IOException if file reading fails*
private static String generateClassApiContent(Path javaFile) throws IOException

** Extracts class-level documentation from JavaDoc comments.** @param content Java source content* @return Class documentation or null if not found*
private static String extractClassDocumentation(String content)

** Extracts the class declaration line.** @param content Java source content* @param className Expected class name* @return Class declaration or null if not found*
private static String extractClassDeclaration(String content, String className)

** Extracts method information from Java source.** @param content Java source content* @return List of method information*
private static List<MethodInfo> extractMethods(String content)

** Checks if a line contains a method declaration.** @param line Source code line* @return true if line appears to be a method declaration*
private static boolean isMethodLine(String line)

** Extracts complete method signature, handling multi-line declarations.** @param lines All source lines* @param startIndex Index of method start* @return Complete method signature*
private static String extractMethodSignature(String[] lines, int startIndex)

** Extracts method documentation from preceding JavaDoc.** @param lines All source lines* @param methodIndex Index of method declaration* @return Method documentation or default*
private static String extractMethodDocumentation(String[] lines, int methodIndex)

** Cleans JavaDoc text for API output.** @param javadoc Raw JavaDoc text* @return Cleaned documentation text*
private static String cleanJavadoc(String javadoc)

** Prints usage information.*
private static void printUsage()

</class ApiWriter>

---
*Package tools provides core functionality with professional error handling*
*All classes follow defensive programming principles with comprehensive assertions*
